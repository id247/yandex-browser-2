/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$appstore-name: 'appstore';
$appstore-x: 0px;
$appstore-y: 114px;
$appstore-offset-x: 0px;
$appstore-offset-y: -114px;
$appstore-width: 158px;
$appstore-height: 46px;
$appstore-total-width: 317px;
$appstore-total-height: 200px;
$appstore-image: '../images/sprite.png';
$appstore: (0px, 114px, 0px, -114px, 158px, 46px, 317px, 200px, '../images/sprite.png', 'appstore', );
$arrow-1-name: 'arrow-1';
$arrow-1-x: 0px;
$arrow-1-y: 0px;
$arrow-1-offset-x: 0px;
$arrow-1-offset-y: 0px;
$arrow-1-width: 317px;
$arrow-1-height: 114px;
$arrow-1-total-width: 317px;
$arrow-1-total-height: 200px;
$arrow-1-image: '../images/sprite.png';
$arrow-1: (0px, 0px, 0px, 0px, 317px, 114px, 317px, 200px, '../images/sprite.png', 'arrow-1', );
$google-play-name: 'google-play';
$google-play-x: 158px;
$google-play-y: 114px;
$google-play-offset-x: -158px;
$google-play-offset-y: -114px;
$google-play-width: 158px;
$google-play-height: 46px;
$google-play-total-width: 317px;
$google-play-total-height: 200px;
$google-play-image: '../images/sprite.png';
$google-play: (158px, 114px, -158px, -114px, 158px, 46px, 317px, 200px, '../images/sprite.png', 'google-play', );
$rocket-name: 'rocket';
$rocket-x: 0px;
$rocket-y: 160px;
$rocket-offset-x: 0px;
$rocket-offset-y: -160px;
$rocket-width: 41px;
$rocket-height: 40px;
$rocket-total-width: 317px;
$rocket-total-height: 200px;
$rocket-image: '../images/sprite.png';
$rocket: (0px, 160px, 0px, -160px, 41px, 40px, 317px, 200px, '../images/sprite.png', 'rocket', );
$shield-name: 'shield';
$shield-x: 41px;
$shield-y: 160px;
$shield-offset-x: -41px;
$shield-offset-y: -160px;
$shield-width: 32px;
$shield-height: 40px;
$shield-total-width: 317px;
$shield-total-height: 200px;
$shield-image: '../images/sprite.png';
$shield: (41px, 160px, -41px, -160px, 32px, 40px, 317px, 200px, '../images/sprite.png', 'shield', );
$spritesheet-width: 317px;
$spritesheet-height: 200px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($appstore, $arrow-1, $google-play, $rocket, $shield, );
$spritesheet: (317px, 200px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Here are example usages in HTML:

`display: block` sprite:
<div class="icon-home"></div>

`display: inline-block` sprite:
<img class="icon-home" />
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
